apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cm
  labels:
    app.kubernetes.io/name: argocd-cm
    app.kubernetes.io/part-of: argocd

data:
  exec.enabled: "true"

  helm.enabled: "true"
  kustomize.buildOptions: --enable-helm --load-restrictor LoadRestrictionsNone
  kustomize.enabled: "true"

  statusbadge.enabled: "true"

  url: https://argocd.starry.blue

  users.anonymous.enabled: "false"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-notifications-cm
  labels:
    app.kubernetes.io/name: argocd-notifications-controller
    app.kubernetes.io/part-of: argocd

data:
  service.github: |
    appID: 294358
    installationID: 34273348
    privateKey: $github-privateKey
  service.webhook.discord: |
    url: $discord-webhook-url
    headers:
      - name: Content-Type
        value: application/json

  template.discord-status: |
    webhook:
      discord:
        method: POST
        body: |
          {
            "username": "Argo CD",
            "embeds": [
              {
                {{if eq .app.status.operationState.phase "Succeeded"}}"color": 34628,{{end}}
                {{if eq .app.status.operationState.phase "Running"}}"color": 16754432,{{end}}
                {{if eq .app.status.operationState.phase "Error"}}"color": 14036256,{{end}}
                {{if eq .app.status.operationState.phase "Failed"}}"color": 14036256,{{end}},
                "title": "{{.app.metadata.name}}",
                "description": "Application status is **{{.app.status.operationState.phase}}**.",
                "url": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}"
              }
            ]
          }
  template.github-success: |
    message: Application {{.app.metadata.name}} is now running new version of deployments manifests.
    github:
      status:
        state: success
        label: "CD/{{.app.metadata.name}}"
        targetURL: "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"

  trigger.on-deployed: |
    - when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
      oncePer: app.status.sync.revision
      send: [github-success]
  trigger.on-status-change: |
    - when: app.status.operationState.phase in ['Succeeded', 'Running', 'Error', 'Failed']
      send: [discord-status]

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-rbac-cm
  labels:
    app.kubernetes.io/name: argocd-rbac-cm
    app.kubernetes.io/part-of: argocd

data:
  # enable exec
  policy.csv: p, role:admin, exec, create, */*, allow

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-image-updater-config
  labels:
    app.kubernetes.io/name: argocd-image-updater

data:
  log.level: debug
