apiVersion: v1
kind: Namespace
metadata:
  name: authentik
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: authentik
  namespace: authentik
  labels:
    app.kubernetes.io/instance: authentik
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: serviceAccount
    app.kubernetes.io/part-of: authentik
    app.kubernetes.io/version: 2.0.0
    helm.sh/chart: serviceAccount-2.0.0
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: authentik-redis
  namespace: authentik
  labels:
    app.kubernetes.io/instance: authentik
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.3
    helm.sh/chart: redis-18.6.1
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: authentik
  namespace: authentik
  labels:
    app.kubernetes.io/instance: authentik
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: serviceAccount
    app.kubernetes.io/part-of: authentik
    app.kubernetes.io/version: 2.0.0
    helm.sh/chart: serviceAccount-2.0.0
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
      - services
      - configmaps
    verbs:
      - get
      - create
      - delete
      - list
      - patch
  - apiGroups:
      - extensions
      - apps
    resources:
      - deployments
    verbs:
      - get
      - create
      - delete
      - list
      - patch
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - create
      - delete
      - list
      - patch
  - apiGroups:
      - traefik.containo.us
      - traefik.io
    resources:
      - middlewares
    verbs:
      - get
      - create
      - delete
      - list
      - patch
  - apiGroups:
      - monitoring.coreos.com
    resources:
      - servicemonitors
    verbs:
      - get
      - create
      - delete
      - list
      - patch
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: authentik-authentik
  labels:
    app.kubernetes.io/instance: authentik
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: serviceAccount
    app.kubernetes.io/part-of: authentik
    app.kubernetes.io/version: 2.0.0
    helm.sh/chart: serviceAccount-2.0.0
rules:
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: authentik
  namespace: authentik
  labels:
    app.kubernetes.io/instance: authentik
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: serviceAccount
    app.kubernetes.io/part-of: authentik
    app.kubernetes.io/version: 2.0.0
    helm.sh/chart: serviceAccount-2.0.0
roleRef:
  name: authentik
  apiGroup: rbac.authorization.k8s.io
  kind: Role
subjects:
  - name: authentik
    kind: ServiceAccount
    namespace: authentik
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: authentik-authentik
  labels:
    app.kubernetes.io/instance: authentik
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: serviceAccount
    app.kubernetes.io/part-of: authentik
    app.kubernetes.io/version: 2.0.0
    helm.sh/chart: serviceAccount-2.0.0
roleRef:
  name: authentik-authentik
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
subjects:
  - name: authentik
    kind: ServiceAccount
    namespace: authentik
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: authentik-postgresql-extended-configuration
  namespace: authentik
  labels:
    app.kubernetes.io/component: primary
    app.kubernetes.io/instance: authentik
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
data:
  override.conf: max_connections = 500
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: authentik-redis-configuration
  namespace: authentik
  labels:
    app.kubernetes.io/instance: authentik
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.3
    helm.sh/chart: redis-18.6.1
data:
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: authentik-redis-health
  namespace: authentik
  labels:
    app.kubernetes.io/instance: authentik
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.3
    helm.sh/chart: redis-18.6.1
data:
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: authentik-redis-scripts
  namespace: authentik
  labels:
    app.kubernetes.io/instance: authentik
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.3
    helm.sh/chart: redis-18.6.1
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
apiVersion: v1
kind: Secret
metadata:
  name: authentik-dummy
  namespace: authentik
  labels:
    app.kubernetes.io/instance: authentik
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: authentik
    app.kubernetes.io/part-of: authentik
    app.kubernetes.io/version: 2024.2.3
    helm.sh/chart: authentik-2024.2.3
data:
  AUTHENTIK_EMAIL__FROM: ZHVtbXk=
  AUTHENTIK_EMAIL__HOST: ZHVtbXk=
  AUTHENTIK_EMAIL__PASSWORD: ZHVtbXk=
  AUTHENTIK_EMAIL__PORT: NTg3
  AUTHENTIK_EMAIL__TIMEOUT: MzA=
  AUTHENTIK_EMAIL__USERNAME: ZHVtbXk=
  AUTHENTIK_EMAIL__USE_SSL: ZmFsc2U=
  AUTHENTIK_EMAIL__USE_TLS: dHJ1ZQ==
  AUTHENTIK_ERROR_REPORTING__ENABLED: ZmFsc2U=
  AUTHENTIK_ERROR_REPORTING__ENVIRONMENT: azhz
  AUTHENTIK_ERROR_REPORTING__SEND_PII: ZmFsc2U=
  AUTHENTIK_EVENTS__CONTEXT_PROCESSORS__ASN: L2dlb2lwL0dlb0xpdGUyLUFTTi5tbWRi
  AUTHENTIK_EVENTS__CONTEXT_PROCESSORS__GEOIP: L2dlb2lwL0dlb0xpdGUyLUNpdHkubW1kYg==
  AUTHENTIK_LOG_LEVEL: aW5mbw==
  AUTHENTIK_OUTPOSTS__CONTAINER_IMAGE_BASE: Z2hjci5pby9nb2F1dGhlbnRpay8lKHR5cGUpczolKHZlcnNpb24pcw==
  AUTHENTIK_POSTGRESQL__HOST: YXV0aGVudGlrLXBvc3RncmVzcWw=
  AUTHENTIK_POSTGRESQL__NAME: YXV0aGVudGlr
  AUTHENTIK_POSTGRESQL__PASSWORD: ZHVtbXk=
  AUTHENTIK_POSTGRESQL__PORT: NTQzMg==
  AUTHENTIK_POSTGRESQL__USER: YXV0aGVudGlr
  AUTHENTIK_REDIS__HOST: YXV0aGVudGlrLXJlZGlzLW1hc3Rlcg==
  AUTHENTIK_SECRET_KEY: ZHVtbXk=
  GEOIPUPDATE_ACCOUNT_ID: ZHVtbXk=
  GEOIPUPDATE_LICENSE_KEY: ZHVtbXk=
---
apiVersion: v1
kind: Secret
metadata:
  name: authentik-postgresql-dummy
  namespace: authentik
  labels:
    app.kubernetes.io/instance: authentik
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
type: Opaque
data:
  password: ZHVtbXk=
  postgres-password: SXF5N0gzZHI0NA==
---
apiVersion: v1
kind: Service
metadata:
  name: authentik-postgresql
  namespace: authentik
  labels:
    app.kubernetes.io/component: primary
    app.kubernetes.io/instance: authentik
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
spec:
  selector:
    app.kubernetes.io/component: primary
    app.kubernetes.io/instance: authentik
    app.kubernetes.io/name: postgresql
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: authentik-postgresql-hl
  namespace: authentik
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  labels:
    app.kubernetes.io/component: primary
    app.kubernetes.io/instance: authentik
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
spec:
  selector:
    app.kubernetes.io/component: primary
    app.kubernetes.io/instance: authentik
    app.kubernetes.io/name: postgresql
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  clusterIP: None
  publishNotReadyAddresses: true
---
apiVersion: v1
kind: Service
metadata:
  name: authentik-redis-headless
  namespace: authentik
  labels:
    app.kubernetes.io/instance: authentik
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.3
    helm.sh/chart: redis-18.6.1
spec:
  selector:
    app.kubernetes.io/instance: authentik
    app.kubernetes.io/name: redis
  type: ClusterIP
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  clusterIP: None
---
apiVersion: v1
kind: Service
metadata:
  name: authentik-redis-master
  namespace: authentik
  labels:
    app.kubernetes.io/component: master
    app.kubernetes.io/instance: authentik
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.3
    helm.sh/chart: redis-18.6.1
spec:
  selector:
    app.kubernetes.io/component: master
    app.kubernetes.io/instance: authentik
    app.kubernetes.io/name: redis
  type: ClusterIP
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  internalTrafficPolicy: Cluster
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: authentik-server
  namespace: authentik
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: authentik
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: authentik
    app.kubernetes.io/part-of: authentik
    app.kubernetes.io/version: 2024.2.3
    helm.sh/chart: authentik-2024.2.3
spec:
  selector:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: authentik
    app.kubernetes.io/name: authentik
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 9000
      protocol: TCP
    - name: https
      port: 443
      targetPort: 9443
      protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: authentik-server
  namespace: authentik
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: authentik
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: authentik
    app.kubernetes.io/part-of: authentik
    app.kubernetes.io/version: 2024.2.3
    helm.sh/chart: authentik-2024.2.3
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: server
      app.kubernetes.io/instance: authentik
      app.kubernetes.io/name: authentik
  template:
    metadata:
      annotations:
        checksum/secret: 0e8627011b8d1a3813ba0272329599fb702a6d915f0a2b913aa09ac992d31004
      labels:
        app.kubernetes.io/component: server
        app.kubernetes.io/instance: authentik
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: authentik
        app.kubernetes.io/part-of: authentik
        app.kubernetes.io/version: 2024.2.3
        helm.sh/chart: authentik-2024.2.3
    spec:
      containers:
        - name: server
          image: ghcr.io/goauthentik/server:2024.2.3@sha256:07a07c26552fe777500700d0d3f2c9ba6d63dad3e81982f9e8232d5c6db44116
          imagePullPolicy: IfNotPresent
          args:
            - server
          env:
            - name: AUTHENTIK_LISTEN__HTTP
              value: 0.0.0.0:9000
            - name: AUTHENTIK_LISTEN__HTTPS
              value: 0.0.0.0:9443
            - name: AUTHENTIK_LISTEN__METRICS
              value: 0.0.0.0:9300
          envFrom:
            - secretRef:
                name: authentik-dummy
          ports:
            - name: http
              containerPort: 9000
              protocol: TCP
            - name: https
              containerPort: 9443
              protocol: TCP
            - name: metrics
              containerPort: 9300
              protocol: TCP
          volumeMounts:
            - name: geoip-db
              mountPath: /geoip
          resources: {}
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/health/live/
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/health/ready/
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          startupProbe:
            failureThreshold: 60
            httpGet:
              path: /-/health/live/
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
        - name: geoip
          image: ghcr.io/maxmind/geoipupdate:v6.0.0@sha256:e0d5c1dee7379d360e0f355557542d9672c616215dfdd5aaf917382de84cb84c
          imagePullPolicy: IfNotPresent
          env:
            - name: GEOIPUPDATE_FREQUENCY
              value: "8"
            - name: GEOIPUPDATE_PRESERVE_FILE_TIMES
              value: "1"
            - name: GEOIPUPDATE_ACCOUNT_ID
              valueFrom:
                secretKeyRef:
                  name: authentik-dummy
                  key: GEOIPUPDATE_ACCOUNT_ID
            - name: GEOIPUPDATE_LICENSE_KEY
              valueFrom:
                secretKeyRef:
                  name: authentik-dummy
                  key: GEOIPUPDATE_LICENSE_KEY
            - name: GEOIPUPDATE_EDITION_IDS
              value: GeoLite2-City GeoLite2-ASN
          volumeMounts:
            - name: geoip-db
              mountPath: /usr/share/GeoIP
          resources: {}
      volumes:
        - name: geoip-db
          emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: server
                    app.kubernetes.io/instance: authentik
                    app.kubernetes.io/name: authentik
                topologyKey: kubernetes.io/hostname
              weight: 100
      enableServiceLinks: true
      terminationGracePeriodSeconds: 30
  revisionHistoryLimit: 3
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: authentik-worker
  namespace: authentik
  labels:
    app.kubernetes.io/component: worker
    app.kubernetes.io/instance: authentik
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: authentik
    app.kubernetes.io/part-of: authentik
    app.kubernetes.io/version: 2024.2.3
    helm.sh/chart: authentik-2024.2.3
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: worker
      app.kubernetes.io/instance: authentik
      app.kubernetes.io/name: authentik
  template:
    metadata:
      annotations:
        checksum/secret: 0e8627011b8d1a3813ba0272329599fb702a6d915f0a2b913aa09ac992d31004
      labels:
        app.kubernetes.io/component: worker
        app.kubernetes.io/instance: authentik
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: authentik
        app.kubernetes.io/part-of: authentik
        app.kubernetes.io/version: 2024.2.3
        helm.sh/chart: authentik-2024.2.3
    spec:
      containers:
        - name: worker
          image: ghcr.io/goauthentik/server:2024.2.3@sha256:07a07c26552fe777500700d0d3f2c9ba6d63dad3e81982f9e8232d5c6db44116
          imagePullPolicy: IfNotPresent
          args:
            - worker
          env: null
          envFrom:
            - secretRef:
                name: authentik-dummy
          volumeMounts:
            - name: geoip-db
              mountPath: /geoip
          resources: {}
        - name: geoip
          image: ghcr.io/maxmind/geoipupdate:v6.0.0@sha256:e0d5c1dee7379d360e0f355557542d9672c616215dfdd5aaf917382de84cb84c
          imagePullPolicy: IfNotPresent
          env:
            - name: GEOIPUPDATE_FREQUENCY
              value: "8"
            - name: GEOIPUPDATE_PRESERVE_FILE_TIMES
              value: "1"
            - name: GEOIPUPDATE_ACCOUNT_ID
              valueFrom:
                secretKeyRef:
                  name: authentik-dummy
                  key: GEOIPUPDATE_ACCOUNT_ID
            - name: GEOIPUPDATE_LICENSE_KEY
              valueFrom:
                secretKeyRef:
                  name: authentik-dummy
                  key: GEOIPUPDATE_LICENSE_KEY
            - name: GEOIPUPDATE_EDITION_IDS
              value: GeoLite2-City GeoLite2-ASN
          volumeMounts:
            - name: geoip-db
              mountPath: /usr/share/GeoIP
          resources: {}
      volumes:
        - name: geoip-db
          emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: worker
                    app.kubernetes.io/instance: authentik
                    app.kubernetes.io/name: authentik
                topologyKey: kubernetes.io/hostname
              weight: 100
      enableServiceLinks: true
      serviceAccountName: authentik
      terminationGracePeriodSeconds: 30
  revisionHistoryLimit: 3
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: authentik-postgresql
  namespace: authentik
  labels:
    app.kubernetes.io/component: primary
    app.kubernetes.io/instance: authentik
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: primary
      app.kubernetes.io/instance: authentik
      app.kubernetes.io/name: postgresql
  template:
    metadata:
      name: authentik-postgresql
      annotations:
        checksum/extended-configuration: f231c584ead90a4176b09eb6d6073240ab2939b8bd09b20013265962083b3208
      labels:
        app.kubernetes.io/component: primary
        app.kubernetes.io/instance: authentik
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 15.4.0
        helm.sh/chart: postgresql-12.12.10
    spec:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.4.0-debian-11-r45@sha256:5dba7e6a514d5d628d484d23212dcaf3d7c5816af1d4970649547a03a99f78dc
          imagePullPolicy: IfNotPresent
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: /bitnami/postgresql
            - name: PGDATA
              value: /bitnami/postgresql/data
            - name: POSTGRES_USER
              value: authentik
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: authentik-postgresql-dummy
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: authentik-postgresql-dummy
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: authentik
            - name: POSTGRESQL_ENABLE_LDAP
              value: no
            - name: POSTGRESQL_ENABLE_TLS
              value: no
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: off
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: error
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: pgaudit
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          volumeMounts:
            - name: postgresql-extended-config
              mountPath: /bitnami/postgresql/conf/conf.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "authentik" -d "dbname=authentik" -h 127.0.0.1 -p
                  5432
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "authentik" -d "dbname=authentik" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
      volumes:
        - name: postgresql-extended-config
          configMap:
            name: authentik-postgresql-extended-configuration
        - name: dshm
          emptyDir:
            medium: Memory
      affinity:
        nodeAffinity: null
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: primary
                    app.kubernetes.io/instance: authentik
                    app.kubernetes.io/name: postgresql
                topologyKey: kubernetes.io/hostname
              weight: 1
      hostIPC: false
      hostNetwork: false
      securityContext:
        fsGroup: 1001
      serviceAccountName: default
  serviceName: authentik-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: authentik-redis-master
  namespace: authentik
  labels:
    app.kubernetes.io/component: master
    app.kubernetes.io/instance: authentik
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.3
    helm.sh/chart: redis-18.6.1
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: master
      app.kubernetes.io/instance: authentik
      app.kubernetes.io/name: redis
  template:
    metadata:
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: 43cdf68c28f3abe25ce017a82f74dbf2437d1900fd69df51a55a3edf6193d141
        checksum/secret: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
      labels:
        app.kubernetes.io/component: master
        app.kubernetes.io/instance: authentik
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.2.3
        helm.sh/chart: redis-18.6.1
    spec:
      containers:
        - name: redis
          image: registry-1.docker.io/bitnami/redis:7.2.4-debian-11-r2@sha256:3d891036173cf9e51252e1c9e526e08f5aa319df8605d3be6e40360538170da3
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: yes
            - name: REDIS_TLS_ENABLED
              value: no
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
          resources:
            limits: {}
            requests: {}
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
            failureThreshold: 5
            initialDelaySeconds: 20
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 6
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
            failureThreshold: 5
            initialDelaySeconds: 20
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 2
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
      volumes:
        - name: start-scripts
          configMap:
            name: authentik-redis-scripts
            defaultMode: 493
        - name: health
          configMap:
            name: authentik-redis-health
            defaultMode: 493
        - name: config
          configMap:
            name: authentik-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
      affinity:
        nodeAffinity: null
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: master
                    app.kubernetes.io/instance: authentik
                    app.kubernetes.io/name: redis
                topologyKey: kubernetes.io/hostname
              weight: 1
      automountServiceAccountToken: true
      enableServiceLinks: true
      securityContext:
        fsGroup: 1001
      serviceAccountName: authentik-redis
      terminationGracePeriodSeconds: 30
  serviceName: authentik-redis-headless
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: redis-data
        labels:
          app.kubernetes.io/component: master
          app.kubernetes.io/instance: authentik
          app.kubernetes.io/name: redis
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: authentik-server
  namespace: authentik
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: authentik
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: authentik
    app.kubernetes.io/part-of: authentik
    app.kubernetes.io/version: 2024.2.3
    helm.sh/chart: authentik-2024.2.3
spec:
  rules:
    - http:
        paths:
          - backend:
              service:
                name: authentik-server
                port:
                  number: 80
            path: /
            pathType: Prefix
---
apiVersion: onepassword.com/v1
kind: OnePasswordItem
metadata:
  name: authentik
  namespace: authentik
spec:
  itemPath: vaults/4mogpcwrvtvsnpooum4vcevwkm/items/x3u762blxayddxypeconeyznby
---
apiVersion: onepassword.com/v1
kind: OnePasswordItem
metadata:
  name: authentik-postgresql
  namespace: authentik
type: Opaque
spec:
  itemPath: vaults/4mogpcwrvtvsnpooum4vcevwkm/items/eufkmaql3e72bf2ehfaovj4yv4
