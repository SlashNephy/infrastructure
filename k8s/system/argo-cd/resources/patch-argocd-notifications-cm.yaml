apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-notifications-cm
  namespace: argo-cd
  labels:
    app.kubernetes.io/name: argocd-notifications-controller
    app.kubernetes.io/part-of: argocd

data:
  defaultTriggers: |
    - success-deploy
    - failed-deploy

  service.github: |
    appID: 662004
    installationID: 44609158
    privateKey: $github-privateKey
  service.webhook.discord: |
    url: $discord-webhook-url
    headers:
      - name: Content-Type
        value: application/json

  subscriptions: |
    - recipients:
        - github
      triggers:
        - success-deploy
    - recipients:
        - discord
      triggers:
        - failed-deploy

  template.discord-status: |
    webhook:
      discord:
        method: POST
        body: |
          {
            "username": "Argo CD",
            "embeds": [
              {
                {{if eq .app.status.operationState.phase "Succeeded"}}"color": 34628,{{end}}
                {{if eq .app.status.operationState.phase "Running"}}"color": 16754432,{{end}}
                {{if eq .app.status.operationState.phase "Error"}}"color": 14036256,{{end}}
                {{if eq .app.status.operationState.phase "Failed"}}"color": 14036256,{{end}}
                "title": "{{.app.metadata.name}}",
                "description": "Application state is now **{{.app.status.operationState.phase}}**.",
                "url": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}"
              }
            ]
          }
  template.github-status: |
    message: Application {{.app.metadata.name}} is now running with new manifest.
    github:
      status:
        state: success
        label: "CD/{{.app.metadata.name}}"
        targetURL: "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"

  trigger.success-deploy: |
    - when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
      oncePer: app.status.operationState.syncResult.revision
      send: [github-status]
  trigger.failed-deploy: |
    - when: app.status.operationState.phase in ['Error', 'Failed']
      oncePer: app.status.operationState.syncResult.revision
      send: [discord-status]
