apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cm
  labels:
    app.kubernetes.io/name: argocd-cm
    app.kubernetes.io/part-of: argocd

data:
  exec.enabled: "true"

  helm.enabled: "true"
  kustomize.buildOptions: --enable-helm --load-restrictor LoadRestrictionsNone
  kustomize.enabled: "true"

  statusbadge.enabled: "true"

  url: https://argocd.starry.blue

  users.anonymous.enabled: "true"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cmd-params-cm
  labels:
    app.kubernetes.io/name: argocd-cmd-params-cm
    app.kubernetes.io/part-of: argocd

data:
  applicationsetcontroller.log.format: text
  applicationsetcontroller.log.level: debug
  controller.log.format: text
  controller.log.level: debug
  controller.operation.processors: "10"
  controller.repo.server.timeout.seconds: "60"
  controller.self.heal.timeout.seconds: "5"
  controller.status.processors: "20"
  reposerver.log.format: text
  reposerver.log.level: debug
  reposerver.parallelism.limit: "0"
  server.disable.auth: "false"
  server.log.format: text
  server.log.level: debug

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-notifications-cm
  labels:
    app.kubernetes.io/name: argocd-notifications-controller
    app.kubernetes.io/part-of: argocd

data:
  service.github: |
    appID: 294358
    installationID: 34273348
    privateKey: $github-privateKey
  service.webhook.discord: |
    url: $discord-webhook-url
    headers:
      - name: Content-Type
        value: application/json

  subscriptions: |
    - recipients:
        - github
      triggers:
        - on-deployed
    - recipients:
        - discord
      triggers:
        - on-status-change

  template.discord-status: |
    webhook:
      discord:
        method: POST
        body: |
          {
            "username": "Argo CD",
            "embeds": [
              {
                {{if eq .app.status.operationState.phase "Succeeded"}}"color": 34628,{{end}}
                {{if eq .app.status.operationState.phase "Running"}}"color": 16754432,{{end}}
                {{if eq .app.status.operationState.phase "Error"}}"color": 14036256,{{end}}
                {{if eq .app.status.operationState.phase "Failed"}}"color": 14036256,{{end}}
                "title": "{{.app.metadata.name}}",
                "description": "Application state is now **{{.app.status.operationState.phase}}**.",
                "url": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}"
              }
            ]
          }
  template.github-success: |
    message: Application {{.app.metadata.name}} is now running new version of deployments manifests.
    github:
      status:
        state: success
        label: "CD/{{.app.metadata.name}}"
        targetURL: "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"

  trigger.on-deployed: |
    - when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
      oncePer: app.status.sync.revision
      send: [github-success]
  trigger.on-status-change: |
    - when: app.status.operationState.phase in ['Succeeded', 'Error', 'Failed']
      oncePer: app.status.sync.revision
      send: [discord-status]

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-rbac-cm
  labels:
    app.kubernetes.io/name: argocd-rbac-cm
    app.kubernetes.io/part-of: argocd

data:
  # enable exec
  policy.csv: p, role:admin, exec, create, */*, allow

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-image-updater-config
  labels:
    app.kubernetes.io/name: argocd-image-updater

data:
  log.level: debug
  registries.conf: |
    registries:
      - name: Docker Hub
        prefix: docker.io
        api_url: https://registry-1.docker.io
        credentials: pullsecret:argo-cd/docker-hub-credentials
        defaultns: library
        default: true
      - name: GitHub Container Registry
        prefix: ghcr.io
        api_url: https://ghcr.io/v2
        credentials: pullsecret:argo-cd/ghcr-io-credentials
